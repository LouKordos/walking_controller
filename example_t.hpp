/** THIS IS AN AUTOMATICALLY GENERATED FILE.
 *  DO NOT MODIFY BY HAND!!
 *
 *  Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __example_t_hpp__
#define __example_t_hpp__

#include <vector>
#include <string>


class example_t
{
    public:
        int64_t    timestamp;

        double     position[3];

        double     orientation[4];

        int32_t    num_ranges;

        std::vector< int16_t > ranges;

        std::string name;

        int8_t     enabled;

        int32_t    nExamples1;

        int32_t    nExamples2;

        std::vector< std::vector< example_t > > subExamples;

        std::vector< std::vector< std::string > > subStrings;

    public:
        #if __cplusplus > 199711L /* if c++11 */
        static constexpr int8_t   test_const_8_max_hex = 0xff;
        static constexpr int16_t  test_const_16_max_hex = 0xffff;
        static constexpr int32_t  test_const_32_max_hex = 0xffffffff;
        static constexpr int64_t  test_const_64_max_hex = 0xffffffffffffffffLL;
        static constexpr float    test_const_float = 1e-20;
        static constexpr double   test_const_double = 12.1e200;
        #else
        static const     int8_t   test_const_8_max_hex = 0xff;
        static const     int16_t  test_const_16_max_hex = 0xffff;
        static const     int32_t  test_const_32_max_hex = 0xffffffff;
        static const     int64_t  test_const_64_max_hex = 0xffffffffffffffffLL;
        static const     float    test_const_float = 1e-20;
        static const     double   test_const_double = 12.1e200;
        #endif

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~example_t() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "example_t"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int example_t::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int example_t::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t example_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t example_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* example_t::getTypeName()
{
    return "example_t";
}

int example_t::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->position[0], 3);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->orientation[0], 4);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_ranges, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    if(this->num_ranges > 0) {
        thislen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->ranges[0], this->num_ranges);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    char* name_cstr = (char*) this->name.c_str();
    thislen = __string_encode_array(buf, offset + pos, maxlen - pos, &name_cstr, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->enabled, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->nExamples1, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->nExamples2, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->nExamples1; ++a0) {
        for (int a1 = 0; a1 < this->nExamples2; ++a1) {
            thislen = this->subExamples[a0][a1]._encodeNoHash(buf, offset + pos, maxlen - pos);
            if(thislen < 0) return thislen; else pos += thislen;
        }
    }

    for (int a0 = 0; a0 < this->nExamples1; ++a0) {
        for (int a1 = 0; a1 < this->nExamples2; ++a1) {
            char* __cstr = (char*) this->subStrings[a0][a1].c_str();
            thislen = __string_encode_array(buf, offset + pos, maxlen - pos, &__cstr, 1);
            if(thislen < 0) return thislen; else pos += thislen;
        }
    }

    return pos;
}

int example_t::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->position[0], 3);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->orientation[0], 4);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_ranges, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    if(this->num_ranges > 0) {
        this->ranges.resize(this->num_ranges);
        thislen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->ranges[0], this->num_ranges);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    int32_t __name_len__;
    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__name_len__, 1);
    if(thislen < 0) return thislen; else pos += thislen;
    if((uint32_t)__name_len__ > maxlen - pos) return -1;
    this->name.assign(((const char*)buf) + offset + pos, __name_len__ - ZCM_CORETYPES_INT8_NUM_BYTES_ON_BUS);
    pos += __name_len__;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->enabled, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->nExamples1, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->nExamples2, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->subExamples.resize(this->nExamples1);
    for (int a0 = 0; a0 < this->nExamples1; ++a0) {
        this->subExamples[a0].resize(this->nExamples2);
        for (int a1 = 0; a1 < this->nExamples2; ++a1) {
            thislen = this->subExamples[a0][a1]._decodeNoHash(buf, offset + pos, maxlen - pos);
            if(thislen < 0) return thislen; else pos += thislen;
        }
    }

    this->subStrings.resize(this->nExamples1);
    for (int a0 = 0; a0 < this->nExamples1; ++a0) {
        this->subStrings[a0].resize(this->nExamples2);
        for (int a1 = 0; a1 < this->nExamples2; ++a1) {
            int32_t __elem_len;
            thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__elem_len, 1);
            if(thislen < 0) return thislen; else pos += thislen;
            if((uint32_t)__elem_len > maxlen - pos) return -1;
            this->subStrings[a0][a1].assign(((const char*)buf) + offset + pos, __elem_len - ZCM_CORETYPES_INT8_NUM_BYTES_ON_BUS);
            pos += __elem_len;
        }
    }

    return pos;
}

uint32_t example_t::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 3);
    enc_size += __double_encoded_array_size(NULL, 4);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += this->name.size() + ZCM_CORETYPES_INT32_NUM_BYTES_ON_BUS + ZCM_CORETYPES_INT8_NUM_BYTES_ON_BUS;
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->nExamples1; ++a0) {
        for (int a1 = 0; a1 < this->nExamples2; ++a1) {
            enc_size += this->subExamples[a0][a1]._getEncodedSizeNoHash();
        }
    }
    for (int a0 = 0; a0 < this->nExamples1; ++a0) {
        for (int a1 = 0; a1 < this->nExamples2; ++a1) {
            enc_size += this->subStrings[a0][a1].size() + ZCM_CORETYPES_INT32_NUM_BYTES_ON_BUS + ZCM_CORETYPES_INT8_NUM_BYTES_ON_BUS;
        }
    }
    return enc_size;
}

uint64_t example_t::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == example_t::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)example_t::getHash };

    uint64_t hash = (uint64_t)0x176a67702efc53dfLL +
         example_t::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
